/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiEventsByUserUserIdGet } from '../fn/events/api-events-by-user-user-id-get';
import { ApiEventsByUserUserIdGet$Params } from '../fn/events/api-events-by-user-user-id-get';
import { apiEventsCreatePost } from '../fn/events/api-events-create-post';
import { ApiEventsCreatePost$Params } from '../fn/events/api-events-create-post';
import { apiEventsEventIdDelete } from '../fn/events/api-events-event-id-delete';
import { ApiEventsEventIdDelete$Params } from '../fn/events/api-events-event-id-delete';
import { apiEventsEventIdPut } from '../fn/events/api-events-event-id-put';
import { ApiEventsEventIdPut$Params } from '../fn/events/api-events-event-id-put';
import { apiEventsEventIdRegisterPost } from '../fn/events/api-events-event-id-register-post';
import { ApiEventsEventIdRegisterPost$Params } from '../fn/events/api-events-event-id-register-post';
import { apiEventsListForUserUserIdGet } from '../fn/events/api-events-list-for-user-user-id-get';
import { ApiEventsListForUserUserIdGet$Params } from '../fn/events/api-events-list-for-user-user-id-get';
import { apiEventsListGet } from '../fn/events/api-events-list-get';
import { ApiEventsListGet$Params } from '../fn/events/api-events-list-get';
import { apiEventsListWithRegistrationsGet } from '../fn/events/api-events-list-with-registrations-get';
import { ApiEventsListWithRegistrationsGet$Params } from '../fn/events/api-events-list-with-registrations-get';

@Injectable({ providedIn: 'root' })
export class EventsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiEventsEventIdRegisterPost()` */
  static readonly ApiEventsEventIdRegisterPostPath = '/api/Events/{eventId}/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsEventIdRegisterPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsEventIdRegisterPost$Response(params: ApiEventsEventIdRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsEventIdRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsEventIdRegisterPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsEventIdRegisterPost(params: ApiEventsEventIdRegisterPost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsEventIdRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsCreatePost()` */
  static readonly ApiEventsCreatePostPath = '/api/Events/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsCreatePost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventsCreatePost$Response(params?: ApiEventsCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsCreatePost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventsCreatePost(params?: ApiEventsCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsEventIdPut()` */
  static readonly ApiEventsEventIdPutPath = '/api/Events/{eventId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsEventIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventsEventIdPut$Response(params: ApiEventsEventIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsEventIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsEventIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiEventsEventIdPut(params: ApiEventsEventIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsEventIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsEventIdDelete()` */
  static readonly ApiEventsEventIdDeletePath = '/api/Events/{eventId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsEventIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsEventIdDelete$Response(params: ApiEventsEventIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsEventIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsEventIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsEventIdDelete(params: ApiEventsEventIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsEventIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsListGet()` */
  static readonly ApiEventsListGetPath = '/api/Events/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsListGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListGet$Response(params?: ApiEventsListGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsListGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsListGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListGet(params?: ApiEventsListGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsListGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsByUserUserIdGet()` */
  static readonly ApiEventsByUserUserIdGetPath = '/api/Events/by-user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsByUserUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsByUserUserIdGet$Response(params: ApiEventsByUserUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsByUserUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsByUserUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsByUserUserIdGet(params: ApiEventsByUserUserIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsByUserUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsListWithRegistrationsGet()` */
  static readonly ApiEventsListWithRegistrationsGetPath = '/api/Events/list-with-registrations';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsListWithRegistrationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListWithRegistrationsGet$Response(params?: ApiEventsListWithRegistrationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsListWithRegistrationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsListWithRegistrationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListWithRegistrationsGet(params?: ApiEventsListWithRegistrationsGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsListWithRegistrationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiEventsListForUserUserIdGet()` */
  static readonly ApiEventsListForUserUserIdGetPath = '/api/Events/list-for-user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiEventsListForUserUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListForUserUserIdGet$Response(params: ApiEventsListForUserUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiEventsListForUserUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiEventsListForUserUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiEventsListForUserUserIdGet(params: ApiEventsListForUserUserIdGet$Params, context?: HttpContext): Observable<void> {
    return this.apiEventsListForUserUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
